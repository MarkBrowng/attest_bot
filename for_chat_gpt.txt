from aiogram import executor
from aiogram.dispatcher.filters import Text
from only_user.cmd_.commands import *
import logging
from only_user.mem_bot.mem_cmd import mem_answer
from wethear_bot import start_weather, get_weather
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def start_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton('üå§–ü–æ–≥–æ–¥–∞üåß', callback_data='weather')
    button2 = InlineKeyboardButton('üéÆ–ú–∞–≥–∞–∑–∏–Ω –∏–≥—ÄüéÆ', callback_data='gameshop')
    button3 = InlineKeyboardButton('üí∏–ö—É—Ä—Å —Ä—É–±–ª—èüí∏', callback_data='exchange_rate')
    button4 = InlineKeyboardButton('ü§£–ú–µ–º—á–∏–∫ü§£', callback_data='mem')
    kb.add(button1, button2).add(button3, button4)
    return kb

def mem_kbs():
    kb = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton('–î–∞!', callback_data='mem_yes')
    button2 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    kb.add(button1, button2)
    return kb


class MenuStates(StatesGroup):
    menu_waiting = State()
    mem_waiting = State()
    weather_waiting = State()

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

async def cmd_start(message: types.Message, state: FSMContext):
    await bot.send_photo(message.from_user.id, photo= PHOTO_START, caption=TEXT_START, reply_markup=start_kb())
    await MenuStates.menu_waiting.set()

async def cmd_help(message: types.Message, state: FSMContext):
    await message.answer(text=TEXT_HELP)
    await state.finish()

async def cmd_back(callback: types.CallbackQuery, state: FSMContext):
    await bot.send_photo(callback.from_user.id, photo=PHOTO_START, caption=TEXT_START, reply_markup=start_kb())
    await state.finish()

class WeatherStates(StatesGroup):
    weather_waiting = State()

async def start_weather(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')
    await state.update_data(state_value=callback.data)
    await WeatherStates.weather_waiting.set()

async def get_weather(message: types.Message, state: FSMContext):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–Ø—Å–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    try:
        #–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É
        r = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={WEATHER_API}&units=metric')
        data = r.json()

        city = data['name']
        cur_waether = data['main']['temp']

        weather_description = data['weather'][0]['main']
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ —Å–∞–º'


        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        sunrise_tenpstamp = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_timedtamp = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        lenght_of_the_day = sunset_timedtamp - sunrise_tenpstamp
        wind = data['wind']['speed']


        await message.answer(f'{datetime.datetime.now().strftime("%d.%m.%Y %H:%M")}\n'
                            f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_waether} C {wd}\n'
                            f'–≤–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_tenpstamp}\n'
                            f'–∑–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timedtamp}\n'
                            f'–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {lenght_of_the_day}\n'
                            f'—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è')




    except Exception as eer:
        await message.reply('–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    finally:
        await state.finish()

def register_callback(dp: Dispatcher):
    dp.register_callback_query_handler(start_weather,
            lambda callback: callback.data == 'weather', state='*')
    dp.register_message_handler(get_weather, state=WeatherStates.weather_waiting)

MEMS = ['https://timeweb.com/media/articles/0001/18/thumb_17628_articles_standart.png',
        'https://timeweb.com/media/articles/0001/18/thumb_17634_articles_standart.png',
        'https://skillbox.ru/upload/setka_images/14055326052022_08fda0244b5397e030ee401fd2bea5b24f78a72b.jpg',
        'https://skillbox.ru/upload/setka_images/14055326052022_c7c2d6650fe8dd3125b1541cb39af56649bd56fa.jpg',
        'https://skillbox.ru/upload/setka_images/14055326052022_0ed1686442ac630326a48ddcef43684fa02b904b.jpg',
        'https://skillbox.ru/upload/setka_images/14055326052022_fc9956ee2f4201e204a5532c68850c6715ed24e0.jpg',
        'https://ruanekdot.ru/_nw/281/14263451.jpg'
        ]

async def mem_answer(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–•–æ—Ç–∏—Ç–µ –µ—â–µ –ú–µ–º—ã?', reply_markup=mem_kbs())
    await state.update_data(state_value=callback.data)
    await bot.send_photo(callback.from_user.id, photo=random.choice(MEMS))
    await MenuStates.mem_waiting.set()


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands='start', state='*')
    dp.register_message_handler(cmd_help, commands='help', state='*')


def register_weather_commands(dp: Dispatcher):
    dp.register_callback_query_handler(start_weather, lambda callback: callback.data == 'weather', state='*')
    dp.register_message_handler(get_weather, state=MenuStates.weather_waiting)

def register_mem_commands(dp: Dispatcher):
    dp.register_callback_query_handler(mem_yes, lambda callback: callback.data == 'mem_yes', state=MenuStates.mem_waiting)
    dp.register_callback_query_handler(mem_answer, lambda callback: callback.data == 'mem', state='*')
def register_callback_query(dp: Dispatcher):


    dp.register_callback_query_handler(cmd_back, Text(equals='back'), state='*')


def main(dp):
    register_handlers(dp)
    register_callback_query(dp)
    register_mem_commands(dp)
    executor.start_polling(dp, skip_updates=True)

if __name__ == '__main__':
    main(dp)