import requests
import datetime
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import API_TOKEN, WEATHER_API
from aiogram import Bot, Dispatcher, types
from keyboards.inline_kb import back_kb
from loader import storage

class WeatherStates(StatesGroup):
    weather_waiting = State()

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

async def start_weather(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')
    await state.update_data(state_value=callback.data)
    await WeatherStates.weather_waiting.set()

async def cmd_start_weather(message: types.Message):
    await message.answer(text='–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')
    await WeatherStates.weather_waiting.set()

async def get_weather(message: types.Message, state: FSMContext):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–Ø—Å–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    try:
        #–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É
        r = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={WEATHER_API}&units=metric')
        data = r.json()

        city = data['name']
        cur_waether = data['main']['temp']

        weather_description = data['weather'][0]['main']
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ —Å–∞–º'

        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        sunrise_tenpstamp = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_timedtamp = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        lenght_of_the_day = sunset_timedtamp - sunrise_tenpstamp
        wind = data['wind']['speed']

        await message.answer(f'{datetime.datetime.now().strftime("%d.%m.%Y %H:%M")}\n'
                            f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_waether} C - {wd}\n'
                            f'üåÖ–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_tenpstamp}\n'
                            f'üåÑ–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timedtamp}\n'
                            f'üîÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {lenght_of_the_day}\n'
                            f'üóª–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\nüíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n'
                            f'üí®–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å', reply_markup=back_kb())

    except Exception as eer:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    finally:
        await state.finish()

def register_weather_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(start_weather, lambda callback: callback.data == 'weather')
    dp.register_message_handler(cmd_start_weather, commands='weather')
    dp.register_message_handler(get_weather, state=WeatherStates.weather_waiting)
